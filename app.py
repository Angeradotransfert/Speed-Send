import eventlet
eventlet.monkey_patch()
import os
import random
import sqlite3
import string
from unittest import result
from flask_socketio import SocketIO, emit




from dotenv import load_dotenv
from flask import Flask, render_template, request, redirect, url_for, session
from flask_mail import Mail, Message
import logging

from flask_wtf import FlaskForm  # Ajout de cette ligne
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
import bcrypt
from flask_login import login_user, login_required, logout_user, current_user
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_wtf.csrf import CSRFProtect

from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, FloatField, HiddenField, SubmitField
from wtforms.validators import DataRequired


load_dotenv()  # charge le fichier .env

# üîí Taux fixes (modifiable plus tard via l'admin si besoin)
FIXED_RATES = {
    ("C√¥te d'Ivoire", "Russie"): 0.136,   # 1‚ÄØXOF ‚ûú 0,136‚ÄØRUB
    ("Russie", "C√¥te d'Ivoire"): 6.6      # 1‚ÄØRUB ‚ûú 6,6‚ÄØXOF
}

# üîí Taux fixes
FIXED_RATES = {
    ("C√¥te d'Ivoire", "Russie"): 0.136,
    ("Russie", "C√¥te d'Ivoire"): 6.6,
    ("S√©n√©gal", "Russie"): 0.136,
    ("Russie", "S√©n√©gal"): 6.6,
    ("Guin√©e", "Russie"): 0.136,
    ("Russie", "Guin√©e"): 6.6,
    ("Burkina Faso", "Russie"): 0.136,
    ("Russie", "Burkina Faso"): 6.6,
    ("Cameroun", "Russie"): 0.128,
    ("Russie", "Cameroun"): 6.54,
    ("Congo Brazzaville", "Russie"): 0.128,
    ("Russie", "Congo Brazzaville"): 6.54,
    ("Congo Kinshasa", "Russie"): 0.128,
    ("Russie", "Congo Kinshasa"): 6.54,
    ("Tchad", "Russie"): 0.128,
    ("Russie", "Tchad"): 6.54
}

# üîí Frais fixes
FIXED_FEES = {
    ("C√¥te d'Ivoire", "Russie"): 370,
    ("Russie", "C√¥te d'Ivoire"): 30,
    ("S√©n√©gal", "Russie"): 370,
    ("Russie", "S√©n√©gal"): 30,
    ("Guin√©e", "Russie"): 370,
    ("Russie", "Guin√©e"): 30,
    ("Burkina Faso", "Russie"): 370,
    ("Russie", "Burkina Faso"): 30,
    ("Cameroun", "Russie"): 280,
    ("Russie", "Cameroun"): 25,
    ("Congo Brazzaville", "Russie"): 280,
    ("Russie", "Congo Brazzaville"): 25,
    ("Congo Kinshasa", "Russie"): 280,
    ("Russie", "Congo Kinshasa"): 25,
    ("Tchad", "Russie"): 280,
    ("Russie", "Tchad"): 25
}


# --- Ajout automatique des colonnes exchange_rate et converted_amount ----------
def add_rate_columns():
    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()
    try:
        c.execute("ALTER TABLE pending_transfers ADD COLUMN exchange_rate REAL;")
    except sqlite3.OperationalError:
        pass
    try:
        c.execute("ALTER TABLE pending_transfers ADD COLUMN converted_amount REAL;")
    except sqlite3.OperationalError:
        pass
    conn.commit()
    conn.close()

add_rate_columns()
# -------------------------------------------------------------------------------

def add_num_expediteur_column():
    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()
    try:
        c.execute("ALTER TABLE pending_transfers ADD COLUMN numero_expediteur TEXT;")
    except sqlite3.OperationalError:
        pass  # colonne d√©j√† pr√©sente
    conn.commit()
    conn.close()

add_num_expediteur_column()

app = Flask(__name__)

socketio = SocketIO(app)

csrf = CSRFProtect(app)
limiter = Limiter(get_remote_address)

app.secret_key = os.getenv('SECRET_KEY')

app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER')

mail = Mail(app)

csrf.init_app(app)

# ‚úÖ Variables de num√©ro selon le pays d‚Äôenvoi
NUMERO_RUSSIE = os.getenv("NUMERO_RUSSIE")
NUMERO_COTEIVOIRE = os.getenv("NUMERO_COTEIVOIRE")

class TransfertForm(FlaskForm):
    nom_expediteur = StringField("Nom de l'exp√©diteur", validators=[DataRequired()])
    pays_envoi = SelectField("Pays d'envoi", choices=[
        ("Russie", "Russie"),
        ("C√¥te d'Ivoire", "C√¥te d'Ivoire"),
        ("Congo Brazzaville", "Congo Brazzaville"),
        ("Congo Kinshasa", "Congo Kinshasa"),
        ("Guin√©e", "Guin√©e"),
        ("Tchad", "Tchad"),
        ("Cameroun", "Cameroun"),
        ("S√©n√©gal", "S√©n√©gal"),
        ("Burkina Faso", "Burkina Faso")
    ], validators=[DataRequired()])

    methode_envoi = SelectField("M√©thode d'envoi", choices=[
        ("Tinkoff", "Tinkoff"),
        ("Sberbank", "Sberbank"),
        ("Carte bancaire", "Carte bancaire"),
        ("Orange Money", "Orange Money"),
        ("MTN", "MTN"),
        ("Wave", "Wave"),
        ("Moov", "Moov")
    ], validators=[DataRequired()])

    montant = FloatField("Montant", validators=[DataRequired()])

    devise_expediteur = SelectField("Devise de l'exp√©diteur", choices=[
        ("XOF", "XOF"),
        ("XAF", "XAF"),
        ("USD", "USD"),
        ("EUR", "EUR"),
        ("GBP", "GBP"),
        ("NGN", "NGN"),
        ("RUB", "RUB (Rouble)")
    ], validators=[DataRequired()])

    numero_expediteur = StringField("Num√©ro de l'exp√©diteur", validators=[DataRequired()])

    # üîµ S√©paration propre
    pays_destinataire = SelectField("Pays du destinataire", choices=[
        ("Russie", "Russie"),
        ("C√¥te d'Ivoire", "C√¥te d'Ivoire"),
        ("Congo Brazzaville", "Congo Brazzaville"),
        ("Congo Kinshasa", "Congo Kinshasa"),
        ("Guin√©e", "Guin√©e"),
        ("Tchad", "Tchad"),
        ("Cameroun", "Cameroun"),
        ("S√©n√©gal", "S√©n√©gal"),
        ("Burkina Faso", "Burkina Faso")
    ], validators=[DataRequired()])

    nom_destinataire = StringField("Nom du destinataire", validators=[DataRequired()])
    numero_destinataire = StringField("Num√©ro du destinataire", validators=[DataRequired()])

    methode_reception = SelectField("M√©thode de r√©ception", choices=[
        ("Orange Money", "Orange Money"),
        ("MTN", "MTN"),
        ("Wave", "Wave"),
        ("Moov", "Moov"),
        ("Carte bancaire", "Carte bancaire"),
        ("Compte bancaire", "Compte bancaire")
    ], validators=[DataRequired()])

    devise_destinataire = SelectField("Devise du destinataire", choices=[
        ("XOF", "XOF"),
        ("XAF", "XAF"),
        ("USD", "USD"),
        ("EUR", "EUR"),
        ("GBP", "GBP"),
        ("NGN", "NGN"),
        ("RUB", "RUB (Rouble)")
    ], validators=[DataRequired()])

    exchange_rate = HiddenField()
    converted_amount = HiddenField()

    submit = SubmitField("Envoyer")

# Formulaire Flask-WTF pour la connexion
class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired()])
    password = PasswordField('Mot de passe', validators=[DataRequired()])
    submit = SubmitField('Se connecter')

def init_db():
    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()

    # Cr√©er la table users avec la colonne 'role' directement
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL,
            verification_code TEXT,
            is_verified INTEGER DEFAULT 0,
            role TEXT DEFAULT 'user'  -- Colonne 'role' ajout√©e avec valeur par d√©faut
        )
    ''')

    # Cr√©er d'autres tables si n√©cessaire (wallets, balances, transactions, etc.)
    c.execute('''
        CREATE TABLE IF NOT EXISTS wallets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            currency TEXT NOT NULL,
            balance REAL DEFAULT 0,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')

    conn.commit()
    conn.close()



    # Ajouter la colonne role si elle n'existe pas d√©j√†
    try:
        c.execute("ALTER TABLE users ADD COLUMN role TEXT DEFAULT 'user';")
    except sqlite3.OperationalError:
        pass  # Ignore si la colonne existe d√©j√†

    conn.commit()
    conn.close()

    # Table des utilisateurs
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL,
            verification_code TEXT,
            is_verified INTEGER DEFAULT 0
        )
    ''')

    c.execute('''
    CREATE TABLE IF NOT EXISTS wallets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        currency TEXT NOT NULL,
        balance REAL DEFAULT 0,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
''')

    # Table des soldes
    c.execute('''
        CREATE TABLE IF NOT EXISTS balances (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            currency TEXT NOT NULL,
            amount REAL DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')

    c.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sender_id INTEGER,
                recipient_id INTEGER,
                currency TEXT,
                amount REAL,
                date TEXT,
                FOREIGN KEY(sender_id) REFERENCES users(id),
                FOREIGN KEY(recipient_id) REFERENCES users(id)
            )
        ''')

    c.execute('''
            CREATE TABLE IF NOT EXISTS external_transfers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sender_id INTEGER,
                amount REAL,
                currency TEXT,
                recipient_type TEXT, -- 'email', 'phone', 'bank'
                recipient_value TEXT, -- ex: email, num√©ro ou IBAN
                status TEXT DEFAULT 'pending',
                flutterwave_ref TEXT,
                date TEXT,
                FOREIGN KEY(sender_id) REFERENCES users(id)
            )
        ''')

    c.execute('''
        CREATE TABLE IF NOT EXISTS pending_transfers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sender_name TEXT,
            sender_country TEXT,
            payment_method TEXT,
            amount REAL,
            total_with_fees REAL,
            currency TEXT,
            recipient_name TEXT,
            recipient_phone TEXT,
            recipient_operator TEXT,
            status TEXT DEFAULT 'en_attente',
            created_at TEXT
        )
    ''')

    conn.commit()
    conn.close()



@app.route('/')
def home():
    return render_template('index.html')

@app.route('/register_form')
def register_form():
    return render_template('register.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']

        # Hachage du mot de passe avant de l'enregistrer
        hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        conn = sqlite3.connect('transfert.db')
        c = conn.cursor()

        try:
            c.execute("INSERT INTO users (name, email, password) VALUES (?, ?, ?)",
                      (name, email, hashed_pw))
            conn.commit()
            conn.close()
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash("Cet email est d√©j√† utilis√©.")
            return render_template('register.html')

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
@limiter.limit("3 per minute")  # Limite √† 3 tentatives par minute
def login():
    form = LoginForm()  # Cr√©e une instance du formulaire

    if form.validate_on_submit():  # Si le formulaire est soumis et valide
        email = form.email.data
        password = form.password.data

        conn = sqlite3.connect('transfert.db')
        c = conn.cursor()
        c.execute("SELECT password, is_verified, role FROM users WHERE email = ?", (email,))
        result = c.fetchone()
        conn.close()

        if result:
            db_password, is_verified, role = result
            if bcrypt.checkpw(password.encode('utf-8'), db_password):  # Le mot de passe dans la base de donn√©es est d√©j√† en bytes
                if is_verified:
                    conn = sqlite3.connect('transfert.db')
                    c = conn.cursor()
                    c.execute("SELECT id FROM users WHERE email = ?", (email,))
                    user_id = c.fetchone()[0]
                    conn.close()

                    session['user_id'] = user_id
                    session['user_role'] = role  # Stocke le r√¥le dans la session

                    return redirect(url_for('welcome', user_id=user_id))
                else:
                    flash("Votre compte n'est pas encore v√©rifi√©. Un code vous a √©t√© envoy√©.")
                    return redirect(url_for('verify', email=email))
            else:
                flash("Mot de passe incorrect.")
                return render_template('login.html', form=form)
        else:
            flash("Email introuvable.")
            return render_template('login.html', form=form)

    # Si GET ou si le formulaire est invalide
    return render_template('login.html', form=form)




@app.route('/dashboard/<int:user_id>')
def dashboard(user_id):
    conn = sqlite3.connect('transfert.db')
    conn.row_factory = sqlite3.Row
    c = conn.cursor()

    c.execute("SELECT id, name FROM users WHERE id = ?", (user_id,))
    user = c.fetchone()

    wallets = []
    if user:
        c.execute("SELECT currency, balance FROM wallets WHERE user_id = ?", (user_id,))
        wallets = c.fetchall()
    conn.close()

    return render_template('dashboard.html', username=user['name'], wallets=wallets, user_id=user_id)

@app.route('/add_currency/<int:user_id>', methods=['GET', 'POST'])
def add_currency(user_id):
    if request.method == 'POST':
        currency = request.form['currency']

        conn = sqlite3.connect('transfert.db')
        c = conn.cursor()

        # V√©rifie si la devise existe d√©j√†
        c.execute("SELECT * FROM wallets WHERE user_id = ? AND currency = ?", (user_id, currency))
        exists = c.fetchone()

        if not exists:
            c.execute("INSERT INTO wallets (user_id, currency) VALUES (?, ?)", (user_id, currency))
            conn.commit()

        conn.close()
        return redirect(f"/dashboard/{user_id}")

    # Si GET, on affiche le formulaire
    return render_template("add_currency.html", user_id=user_id)


@app.route('/send_money_form/<username>')
def send_money_form(username):
    conn = sqlite3.connect('transfert.db')
    conn.row_factory = sqlite3.Row
    c = conn.cursor()

    # R√©cup√©rer l'ID de l'utilisateur
    c.execute("SELECT id FROM users WHERE name = ?", (username,))
    user = c.fetchone()

    if not user:
        conn.close()
        return "Utilisateur introuvable"

    user_id = user['id']

    # R√©cup√©rer les soldes
    c.execute("SELECT currency, balance FROM wallets WHERE user_id = ?", (user_id,))
    wallets = c.fetchall()

    conn.close()

    return render_template("send_money.html", username=username, user_id=user_id, wallets=wallets)


@app.route('/send_money', methods=['POST'])
def send_money():
    sender = request.form['sender']
    recipient = request.form['recipient']
    currency = request.form['currency']
    amount = float(request.form['amount'])

    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()

    # V√©rifier les IDs
    c.execute("SELECT id FROM users WHERE name = ?", (sender,))
    sender_id = c.fetchone()

    c.execute("SELECT id FROM users WHERE name = ?", (recipient,))
    recipient_id = c.fetchone()

    if not sender_id or not recipient_id:
        conn.close()
        return "Utilisateur introuvable."

    # V√©rifier solde du sender
    c.execute("SELECT balance FROM wallets WHERE user_id = ? AND currency = ?", (sender_id[0], currency))
    sender_balance = c.fetchone()

    if not sender_balance or sender_balance[0] < amount:
        conn.close()
        return "Solde insuffisant."

    # D√©biter sender
    c.execute("UPDATE wallets SET balance = balance - ? WHERE user_id = ? AND currency = ?",
              (amount, sender_id[0], currency))

    # Cr√©diter recipient (cr√©er la devise si elle n'existe pas)
    c.execute("SELECT balance FROM wallets WHERE user_id = ? AND currency = ?", (recipient_id[0], currency))
    recipient_wallet = c.fetchone()
    if recipient_wallet:
        c.execute("UPDATE wallets SET balance = balance + ? WHERE user_id = ? AND currency = ?",
                  (amount, recipient_id[0], currency))
    else:
        c.execute("INSERT INTO wallets (user_id, currency, balance) VALUES (?, ?, ?)",
                  (recipient_id[0], currency, amount))

    conn.commit()
    from datetime import datetime
    c.execute("INSERT INTO transactions (sender_id, recipient_id, currency, amount, date) VALUES (?, ?, ?, ?, ?)",
              (sender_id[0], recipient_id[0], currency, amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

    conn.close()

    return redirect(url_for('transfert_reussi', recipient=recipient, amount=amount, currency=currency))

@app.route('/verify_code', methods=['POST'])
def verify_code():
    code_entered = request.form['code']
    email = request.form['email']

    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()
    c.execute("SELECT verification_code FROM users WHERE email = ?", (email,))
    result = c.fetchone()

    if result and result[0] == code_entered.strip():
        c.execute("UPDATE users SET is_verified = 1 WHERE email = ?", (email,))
        conn.commit()
        conn.close()
        flash("‚úîÔ∏è Votre compte a √©t√© v√©rifi√© avec succ√®s. Vous pouvez maintenant vous connecter.")
        return redirect(url_for('login'))
    else:
        conn.close()
        error = "Code incorrect. Veuillez r√©essayer."
        return render_template('verify.html', email=email, error=error)


from flask import flash


@app.route('/resend_code', methods=['POST'])
def resend_code():
    from flask import request, flash, render_template
    import re

    email = request.form.get('email')

    print("Renvoyer le code √† :", email)

    if not email or not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        flash("Adresse email invalide.")
        return redirect(url_for('login'))

    try:
        # G√©n√©ration du nouveau code
        new_code = ''.join(random.choices(string.digits, k=6))

        # Mise √† jour dans la base de donn√©es
        conn = sqlite3.connect('transfert.db')
        c = conn.cursor()
        c.execute("UPDATE users SET verification_code = ? WHERE email = ?", (new_code, email))
        conn.commit()

        # Cr√©ation du mail
        msg = Message('Nouveau code de v√©rification',
                      recipients=[email])
        msg.body = f'Bonjour,\n\nVotre nouveau code de v√©rification est : {new_code}\n\nMerci.'

        # Envoi du mail
        mail.send(msg)

        flash("üìß Un nouveau code a √©t√© envoy√© √† votre adresse email.")
        return render_template('verify.html', email=email)

    except Exception as e:
        print(f"[ERREUR MAIL] {e}")
        flash("‚ùå √âchec de l'envoi du mail. V√©rifiez votre adresse ou r√©essayez plus tard.")
        return render_template('verify.html', email=email)

    finally:
        conn.close()


@app.route('/verify', methods=['GET'])
def verify():
    email = request.args.get('email')
    return render_template('verify.html', email=email)

@app.route('/test_email')
def test_email():
    try:
        msg = Message('Test Email ‚úîÔ∏è', recipients=['konea3873@gmail.com'])
        msg.body = 'Ceci est un test d‚Äôenvoi d‚Äôemail depuis ton application Flask.'
        mail.send(msg)
        return "Email de test envoy√© avec succ√®s ‚úÖ"
    except Exception as e:
        return f"Erreur lors de l‚Äôenvoi : {e}"

@app.route('/welcome/<int:user_id>')
def welcome(user_id):
    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()
    c.execute("SELECT name FROM users WHERE id = ?", (user_id,))
    user = c.fetchone()
    conn.close()

    if user:
        return render_template('welcome.html', user_id=user_id, username=user[0])
    else:
        return redirect(url_for('login'))

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

from flask import render_template, request
from rave_python import Rave
from flutterwave_config import FLW_PUBLIC_KEY, FLW_SECRET_KEY

import requests
from dotenv import load_dotenv
import os

load_dotenv()

FLW_SECRET_KEY = os.getenv("FLW_SECRET_KEY")

@app.route('/payer', methods=['GET', 'POST'])
def payer():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        amount = request.form['amount']
        currency = request.form['currency']

        data = {
            "tx_ref": f"TRX-{random.randint(10000,99999)}",
            "amount": amount,
            "currency": currency,
            "redirect_url": "http://127.0.0.1:5000/flutterwave_callback",
            "customer": {
                "email": email,
                "name": name
            },
            "customizations": {
                "title": "SpeedSend - Envoi d'argent",
                "description": "Paiement s√©curis√© via Flutterwave"
            }
        }

        headers = {
            "Authorization": f"Bearer {FLW_SECRET_KEY}",
            "Content-Type": "application/json"
        }

        response = requests.post("https://api.flutterwave.com/v3/payments", json=data, headers=headers)

        if response.status_code == 200:
            payment_link = response.json()['data']['link']
            return redirect(payment_link)
        else:
            return f"Erreur Flutterwave : {response.text}"

    return render_template('payer.html')

@app.route('/paiement_reussi')
def paiement_reussi():
    return "Paiement effectu√© avec succ√®s ! ‚úÖ"

@app.route('/flutterwave_callback')
def flutterwave_callback():
    status = request.args.get('status')
    tx_ref = request.args.get('tx_ref')
    transaction_id = request.args.get('transaction_id')

    if status == 'successful':
        # V√©rifier le paiement aupr√®s de Flutterwave
        headers = {
            "Authorization": f"Bearer {FLW_SECRET_KEY}"
        }

        verify_url = f"https://api.flutterwave.com/v3/transactions/{transaction_id}/verify"
        response = requests.get(verify_url, headers=headers)

        if response.status_code == 200:
            data = response.json()['data']
            amount = data['amount']
            currency = data['currency']
            customer_email = data['customer']['email']

            # üîç Trouver l'utilisateur avec cet email
            conn = sqlite3.connect('transfert.db')
            c = conn.cursor()
            c.execute("SELECT id FROM users WHERE email = ?", (customer_email,))
            user = c.fetchone()

            if user:
                user_id = user[0]

                # üì• Cr√©diter le wallet
                c.execute("SELECT balance FROM wallets WHERE user_id = ? AND currency = ?", (user_id, currency))
                wallet = c.fetchone()
                if wallet:
                    c.execute("UPDATE wallets SET balance = balance + ? WHERE user_id = ? AND currency = ?",
                              (amount, user_id, currency))
                else:
                    c.execute("INSERT INTO wallets (user_id, currency, balance) VALUES (?, ?, ?)",
                              (user_id, currency, amount))

                conn.commit()
                conn.close()
                return "Paiement v√©rifi√© et cr√©dit√© ‚úÖ"
            else:
                return "Utilisateur introuvable dans la base de donn√©es."

        else:
            return f"Erreur v√©rification Flutterwave : {response.text}"

    return "Paiement √©chou√© ou annul√© ‚ùå"

@app.route('/credit_wallet/<int:user_id>')
def credit_wallet(user_id):
    currency = "XOF"
    amount = 50000  # tu peux changer le montant

    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()
    c.execute("SELECT balance FROM wallets WHERE user_id = ? AND currency = ?", (user_id, currency))
    result = c.fetchone()

    if result:
        c.execute("UPDATE wallets SET balance = balance + ? WHERE user_id = ? AND currency = ?", (amount, user_id, currency))
    else:
        c.execute("INSERT INTO wallets (user_id, currency, balance) VALUES (?, ?, ?)", (user_id, currency, amount))

    conn.commit()
    conn.close()
    return f"‚úÖ Wallet de l'utilisateur {user_id} cr√©dit√© avec {amount} {currency}."

@app.route('/seed_data')
def seed_data():
    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()

    # Cr√©ation des utilisateurs
    users = [
        ('Alice', 'alice@example.com', 'pass123'),
        ('Bob', 'bob@example.com', 'pass123')
    ]

    user_ids = {}

    for name, email, password in users:
        try:
            c.execute("INSERT INTO users (name, email, password, is_verified) VALUES (?, ?, ?, 1)",
                      (name, email, password))
            user_id = c.lastrowid
            user_ids[name] = user_id
        except sqlite3.IntegrityError:
            # Si l'utilisateur existe d√©j√†, on le r√©cup√®re
            c.execute("SELECT id FROM users WHERE email = ?", (email,))
            user_id = c.fetchone()[0]
            user_ids[name] = user_id

    # Cr√©diter Alice avec 100000 XOF
    currency = "XOF"
    amount = 100000
    c.execute("SELECT balance FROM wallets WHERE user_id = ? AND currency = ?", (user_ids['Alice'], currency))
    wallet = c.fetchone()

    if wallet:
        c.execute("UPDATE wallets SET balance = ? WHERE user_id = ? AND currency = ?",
                  (amount, user_ids['Alice'], currency))
    else:
        c.execute("INSERT INTO wallets (user_id, currency, balance) VALUES (?, ?, ?)",
                  (user_ids['Alice'], currency, amount))

    conn.commit()
    conn.close()

    return "‚úÖ Donn√©es de test cr√©√©es : Alice (100000 XOF), Bob (0 XOF)"

@app.route('/transfert_reussi')
def transfert_reussi():
    recipient = request.args.get('recipient')
    amount = request.args.get('amount')
    currency = request.args.get('currency')

    return render_template('transfert_reussi.html', recipient=recipient, amount=amount, currency=currency)

@app.route('/historique/<int:user_id>')
def historique(user_id):
    conn = sqlite3.connect('transfert.db')
    conn.row_factory = sqlite3.Row
    c = conn.cursor()

    # R√©cup√®re les transactions envoy√©es par l'utilisateur
    c.execute('''
        SELECT t.amount, t.currency, t.date, u.name as recipient_name
        FROM transactions t
        JOIN users u ON t.recipient_id = u.id
        WHERE t.sender_id = ?
        ORDER BY t.date DESC
    ''', (user_id,))
    transactions = c.fetchall()

    conn.close()
    return render_template("historique.html", transactions=transactions)

@app.route('/send_external_form/<int:user_id>')
def send_external_form(user_id):
    return render_template('send_external_logged.html', user_id=user_id)

@app.route('/send_external', methods=['POST'])
def send_external():
    from datetime import datetime
    import requests

    sender_id = request.form['sender_id']
    amount = float(request.form['amount'])
    currency = request.form['currency']
    recipient_type = request.form['recipient_type']
    recipient_name = request.form['recipient_name']
    recipient_value = request.form['recipient_value']
    operator = request.form['operator']

    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()

    # V√©rifier solde
    c.execute("SELECT balance FROM wallets WHERE user_id = ? AND currency = ?", (sender_id, currency))
    wallet = c.fetchone()

    if not wallet or wallet[0] < amount:
        conn.close()
        return "‚ùå Solde insuffisant"

    # D√©biter
    c.execute("UPDATE wallets SET balance = balance - ? WHERE user_id = ? AND currency = ?",
              (amount, sender_id, currency))

    # üì¶ Pr√©parer les donn√©es Flutterwave
    reference = f"EXT-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    headers = {
        "Authorization": f"Bearer {FLW_SECRET_KEY}",
        "Content-Type": "application/json"
    }

    # Flutterwave bank code ou mobile operator code
    operator_code_map = {
        "Orange Money": "MOMO",  # √† adapter selon pays
        "MTN": "MTN",
        "Wave": "WAVE"
    }

    payout_data = {
        "account_bank": operator_code_map.get(operator, "MOMO"),  # Code op√©rateur
        "account_number": recipient_value,  # num√©ro t√©l√©phone ou compte
        "amount": amount,
        "currency": currency,
        "beneficiary_name": recipient_name,
        "reference": reference,
        "narration": "Transfert externe via SpeedSend"
    }

    # üîÑ Appel API Flutterwave
    # üîÑ Appel API Flutterwave
    flutter_response = requests.post(
        "https://api.flutterwave.com/v3/transfers",
        json=payout_data,
        headers=headers
    )

    status = 'failed'
    flutter_ref = ''

    try:
        flutter_data = flutter_response.json()
        logging.info("R√©ponse Flutterwave : %s", flutter_data)
        if flutter_data['status'] == 'success':
            status = 'sent'
            flutter_ref = flutter_data['data']['id']
    except Exception as e:
        logging.error("Erreur Flutterwave : %s", e)
        flutter_data = {"message": str(e)}

    # üíæ Enregistrer la transaction dans tous les cas
    c.execute('''
        INSERT INTO external_transfers (
            sender_id, amount, currency, recipient_type,
            recipient_value, status, flutterwave_ref, date
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (sender_id, amount, currency, recipient_type, recipient_value,
          status, str(flutter_ref), datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

    conn.commit()
    conn.close()

    # üîÅ S'assurer qu'on retourne TOUJOURS une r√©ponse
    if status == 'sent':
        return f"‚úÖ Transfert vers {recipient_name} via {operator} lanc√© avec succ√®s."
    else:
        return f"‚ùå √âchec du transfert Flutterwave : {flutter_data.get('message', 'Erreur inconnue')}"

@app.route('/transfert_formulaire', methods=['GET', 'POST'])
def transfert_formulaire(transfert_id=None):
    form = TransfertForm()

    # üîµ Choices globaux
    pays_choices = [
        ("Russie", "Russie"),
        ("C√¥te d'Ivoire", "C√¥te d'Ivoire"),
        ("Congo Brazzaville", "Congo Brazzaville"),
        ("Congo Kinshasa", "Congo Kinshasa"),
        ("Guin√©e", "Guin√©e"),
        ("Tchad", "Tchad"),
        ("Cameroun", "Cameroun"),
        ("S√©n√©gal", "S√©n√©gal"),
        ("Burkina Faso", "Burkina Faso")
    ]
    form.pays_envoi.choices = pays_choices
    form.pays_destinataire.choices = pays_choices

    ci_methods = [
        ("Orange Money", "Orange Money"),
        ("Wave", "Wave"),
        ("MTN", "MTN"),
        ("Moov", "Moov")
    ]
    ru_methods = [
        ("Tinkoff", "Tinkoff"),
        ("Sberbank", "Sberbank")
    ]
    autres_methods = [
        ("Orange Money", "Orange Money"),
        ("MTN", "MTN"),
        ("Airtel Money", "Airtel Money"),
        ("Wave", "Wave"),
        ("Orange Money Guin√©e", "Orange Money Guin√©e"),
        ("MTN Mobile Money", "MTN Mobile Money"),
        ("Orange Money Cameroun", "Orange Money Cameroun"),
        ("Wave S√©n√©gal", "Wave S√©n√©gal"),
        ("Orange Money S√©n√©gal", "Orange Money S√©n√©gal"),
        ("Orange Money Burkina", "Orange Money Burkina")
    ]

    devise_choices = [
        ("XOF", "XOF"),
        ("XAF", "XAF"),
        ("USD", "USD"),
        ("EUR", "EUR"),
        ("GBP", "GBP"),
        ("NGN", "NGN"),
        ("RUB", "RUB (Rouble)")
    ]
    form.devise_expediteur.choices = devise_choices
    form.devise_destinataire.choices = devise_choices

    # ‚ö° Dynamiser les m√©thodes en fonction du pays choisi
    if request.method == "POST":
        pays_envoi = request.form.get('pays_envoi')
        pays_destinataire = request.form.get('pays_destinataire')

        if pays_envoi == "Russie":
            form.methode_envoi.choices = ru_methods
        elif pays_envoi == "C√¥te d'Ivoire":
            form.methode_envoi.choices = ci_methods
        else:
            form.methode_envoi.choices = autres_methods

        if pays_destinataire == "Russie":
            form.methode_reception.choices = ru_methods
        elif pays_destinataire == "C√¥te d'Ivoire":
            form.methode_reception.choices = ci_methods
        else:
            form.methode_reception.choices = autres_methods

    else:
        # GET - Valeurs par d√©faut
        form.methode_envoi.choices = autres_methods
        form.methode_reception.choices = autres_methods

    # üéØ Validation
    if form.validate_on_submit():
        from datetime import datetime

        sender_name        = form.nom_expediteur.data
        sender_country     = form.pays_envoi.data
        payment_method     = form.methode_envoi.data
        amount             = form.montant.data
        currency           = form.devise_expediteur.data
        recipient_name     = form.nom_destinataire.data
        recipient_phone    = form.numero_destinataire.data
        recipient_operator = form.methode_reception.data
        recipient_country  = form.pays_destinataire.data
        numero_expediteur  = form.numero_expediteur.data
        currency_dest      = form.devise_destinataire.data

        # üßÆ Lire taux et frais depuis la base
        conn = sqlite3.connect('transfert.db')
        c = conn.cursor()
        c.execute('''
            SELECT rate FROM fees_and_rates
            WHERE source_country = ? AND destination_country = ?
        ''', (sender_country, recipient_country))
        rate_row = c.fetchone()
        rate = rate_row[0] if rate_row else 1

        # 2.5 % des frais
        frais = round(amount * 0.025, 2)

        # Devise des frais selon le pays d‚Äôenvoi
        if sender_country in ["Russie"]:
            frais_currency = "RUB"
        else:
            frais_currency = "XOF"
        conn.close()

        converted = amount * rate
        converted = amount * rate
        total_source = amount + frais
        total_dest   = converted + frais
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # üíæ Enregistrement en BDD
        conn = sqlite3.connect('transfert.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO pending_transfers (
                sender_name, sender_country, payment_method, amount,
                total_with_fees, currency, recipient_name, recipient_phone,
                recipient_operator, created_at, recipient_country,
                numero_expediteur, exchange_rate, converted_amount, currency_dest
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            sender_name, sender_country, payment_method, amount,
            total_dest, currency, recipient_name, recipient_phone,
            recipient_operator, created_at, recipient_country,
            numero_expediteur, rate, converted, currency_dest
        ))
        conn.commit()
        conn.close()

        # ‚úÖ Envoie le transfert au tableau admin en temps r√©el
        socketio.emit('nouveau_transfert', {
            'id': transfert_id,
            'sender_name': sender_name,
            'amount': amount,
            'currency': currency,
            'recipient_name': recipient_name,
            'created_at': created_at,
            'status': 'en_attente'
        })
        # üîî Notification Telegram
        msg = (
            "üì• NOUVEAU TRANSFERT MANUEL\n"
            f"üë§ De : {sender_name} ({sender_country}) via {payment_method}\n"
            f"üìû Num√©ro : {numero_expediteur}\n"
            f"üí∏ Montant envoy√© : {amount} {currency}\n"
            f"üí± Montant √† recevoir : {converted} {currency_dest}\n"
            f"üîÅ Frais : {frais} {frais_currency}\n"
            f"üí∞ Total pay√© : {total_source} {currency}\n"
            f"üì≤ Vers : {recipient_name} / {recipient_phone} ({recipient_operator})\n"
            f"üåç Pays destinataire : {recipient_country}\n"
            f"üïí Date : {created_at}"
        )
        send_telegram_message(msg)

        # üîÑ Redirection confirmation
        return redirect(url_for(
            'confirmer_transfert',
            sender_name=sender_name,
            total_source=total_source,
            currency=currency,
            payment_method=payment_method,
            recipient_name=recipient_name,
            recipient_phone=recipient_phone,
            recipient_operator=recipient_operator,
            created_at=created_at,
            amount=amount,
            sender_country=sender_country,
            recipient_country=recipient_country,
            numero_expediteur=numero_expediteur,
            exchange_rate=rate,
            converted_amount=converted,
            currency_dest=currency_dest,
            frais=frais,
            frais_currency=frais_currency
        ))

    if request.method == "POST":
        print("‚ùå Erreurs de validation :", form.errors)

    return render_template(
        'transfert_formulaire.html',
        form=form,
        numero_russie=NUMERO_RUSSIE,
        numero_cote=NUMERO_COTEIVOIRE
    )

from flask_wtf.csrf import generate_csrf  # ‚úÖ √† ajouter tout en haut si pas encore fait

from flask_wtf.csrf import generate_csrf

@app.route('/confirmer_transfert')
def confirmer_transfert():
    sender_name        = request.args.get('sender_name')
    total_source       = request.args.get('total_source')   # ‚Üê total pay√©
    currency           = request.args.get('currency')       # devise source
    payment_method     = request.args.get('payment_method')
    recipient_name     = request.args.get('recipient_name')
    recipient_phone    = request.args.get('recipient_phone')
    recipient_operator = request.args.get('recipient_operator')
    amount             = request.args.get('amount')
    created_at         = request.args.get('created_at')
    sender_country     = request.args.get('sender_country')
    recipient_country  = request.args.get('recipient_country')
    numero_expediteur  = request.args.get('numero_expediteur')

    # param√®tres destinataire
    exchange_rate    = request.args.get('exchange_rate')
    converted_amount = request.args.get('converted_amount')
    currency_dest    = request.args.get('currency_dest')
    frais            = request.args.get('frais')
    frais_currency   = request.args.get('frais_currency')

    # ID du transfert
    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()
    c.execute(
        "SELECT id FROM pending_transfers WHERE sender_name = ? AND created_at = ?",
        (sender_name, created_at)
    )
    transfert    = c.fetchone()
    transfert_id = transfert[0] if transfert else None
    conn.close()

    return render_template(
        'confirmation_transfert.html',
        sender_name        = sender_name,
        total_source       = total_source,      # total √† payer (devise source)
        currency           = currency,          # devise source
        currency_dest      = currency_dest,     # devise destinataire
        payment_method     = payment_method,
        recipient_name     = recipient_name,
        recipient_phone    = recipient_phone,
        recipient_operator = recipient_operator,
        amount             = amount,
        created_at         = created_at,
        transfert_id       = transfert_id,
        sender_country     = sender_country,
        recipient_country  = recipient_country,
        numero_expediteur  = numero_expediteur,
        exchange_rate      = exchange_rate,
        converted_amount   = converted_amount,
        frais              = frais,
        frais_currency     = frais_currency,
        numero_russie      = NUMERO_RUSSIE,
        numero_cote        = NUMERO_COTEIVOIRE,
        csrf_token         = generate_csrf()
    )

from flask import flash

@app.route('/payer_confirme', methods=['POST'])
def payer_confirme():
    transfert_id = request.form.get('transfert_id')
    if not transfert_id:
        return "Transfert non sp√©cifi√©", 400

    flash("‚úÖ Votre paiement a √©t√© confirm√©. Le transfert est en cours de traitement.")
    return redirect(url_for('etat_transfert', transfert_id=transfert_id))


from flask_wtf.csrf import generate_csrf

@app.route('/admin_transferts')
def admin_transferts():
    if 'user_role' not in session or session['user_role'] != 'admin':
        return redirect(url_for('login'))

    conn = sqlite3.connect('transfert.db')
    conn.row_factory = sqlite3.Row
    c = conn.cursor()

    # üîµ R√©cup√©rer tous les transferts
    c.execute("SELECT * FROM pending_transfers ORDER BY created_at DESC")
    transferts = c.fetchall()

    conn.close()

    csrf_token = generate_csrf()  # üîê G√©n√®re le token manuellement
    return render_template('admin_transferts.html', transferts=transferts, csrf_token=csrf_token)

from flask import jsonify

from flask import jsonify

@app.route('/marquer_effectue', methods=['POST'])
def marquer_effectue():
    transfert_id = request.form.get('transfert_id')
    if not transfert_id:
        return jsonify({'success': False}), 400

    conn = sqlite3.connect('transfert.db')
    c = conn.cursor()
    c.execute("UPDATE pending_transfers SET status = 'effectu√©' WHERE id = ?", (transfert_id,))
    conn.commit()
    conn.close()

    # ‚úÖ Notification socket
    socketio.emit('transfert_valide', {'transfert_id': int(transfert_id)})
    return jsonify({'success': True})

@app.route('/init_db')
def run_init_db():
    init_db()
    return "‚úÖ Base mise √† jour avec la table external_transfers"

# Configuration du bot Telegram
BOT_TOKEN = '8069658289:AAHzBhZbm8opr1rfGBclNpygLx4BSxD6plg'
CHAT_ID = 'TON_CHAT_ID_ICI'

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': 7543021330,
        'text': message
    }
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print("Erreur lors de l'envoi Telegram :", e)

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired()])
    password = PasswordField('Mot de passe', validators=[DataRequired()])
    submit = SubmitField('Se connecter')

@app.route('/transfert_valide')
def transfert_valide():
    return render_template('transfert_valide.html')

@app.route('/etat_transfert/<int:transfert_id>')
def etat_transfert(transfert_id):
    conn = sqlite3.connect('transfert.db')
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute("SELECT * FROM pending_transfers WHERE id = ?", (transfert_id,))
    transfert = c.fetchone()
    conn.close()

    if transfert is None:
        return "Transfert introuvable", 404

    return render_template('etat_transfert.html', transfert=transfert)

@app.route('/debug_list_img')
def debug_list_img():
    import os
    path = os.path.join(app.root_path, 'static', 'img')
    return '<br>'.join(os.listdir(path))


import webbrowser
import threading

def open_browser():
    webbrowser.open_new("http://127.0.0.1:5000")

# Lancer dans un thread s√©par√© pour ne pas bloquer l'app
threading.Timer(1.5, open_browser).start()

if __name__ == '__main__':
    socketio.run(app, debug=True)# Utilise HTTP en mode d√©veloppement

